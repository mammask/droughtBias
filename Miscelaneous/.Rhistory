geom_point(aes(color = SubCategory)) +
geom_line(data = andre[id <40], aes(x = id, y = Value)) +
geom_smooth(data = andre[id <40], aes(x = id, y = Value), method = "glm", formula = "Value ~ Category") +
facet_grid(~Category) + ggthemes::theme_wsj() +
geom_text(aes(x = id, label = paste0("Value:",round(Value))), size = 3, hjust = 1)
pa
pa = ggplot(data = andre, aes(x = id, y = Value)) +
geom_point(aes(color = SubCategory)) +
geom_line(data = andre[id <40], aes(x = id, y = Value)) +
geom_smooth(data = andre[id <40], aes(x = id, y = Value), method = "glm", formula = "Value ~ id") +
facet_grid(~Category) + ggthemes::theme_wsj() +
geom_text(aes(x = id, label = paste0("Value:",round(Value))), size = 3, hjust = 1)
pa
pa = ggplot(data = andre, aes(x = id, y = Value)) +
geom_point(aes(color = SubCategory)) +
geom_line(data = andre[id <40], aes(x = id, y = Value)) +
geom_smooth(data = andre[id <40], aes(x = id, y = Value), method = "loess", formula = "Value ~ Category") +
facet_grid(~Category) + ggthemes::theme_wsj() +
geom_text(aes(x = id, label = paste0("Value:",round(Value))), size = 3, hjust = 1)
pa
pa = ggplot(data = andre, aes(x = id, y = Value)) +
geom_point(aes(color = SubCategory)) +
geom_line(data = andre[id <40], aes(x = id, y = Value)) +
geom_smooth(data = andre[id <40], aes(x = id, y = Value), method = "loess") +
facet_grid(~Category) + ggthemes::theme_wsj() +
geom_text(aes(x = id, label = paste0("Value:",round(Value))), size = 3, hjust = 1)
pa
pa = ggplot(data = andre, aes(x = id, y = Value)) +
geom_point(aes(color = SubCategory)) +
geom_line(data = andre[id <40], aes(x = id, y = Value)) +
geom_smooth(data = andre[id <40], aes(x = id, y = Value), method = "glm") +
facet_grid(~Category) + ggthemes::theme_wsj() +
geom_text(aes(x = id, label = paste0("Value:",round(Value))), size = 3, hjust = 1)
pa
pa = ggplot(data = andre, aes(x = id, y = Value)) +
geom_point(aes(color = SubCategory)) +
geom_line(data = andre[id <40], aes(x = id, y = Value)) +
geom_smooth(data = andre[id <40], aes(x = id, y = Value), method = "lm") +
facet_grid(~Category) + ggthemes::theme_wsj() +
geom_text(aes(x = id, label = paste0("Value:",round(Value))), size = 3, hjust = 1)
pa
pa = ggplot(data = andre, aes(x = id, y = Value)) +
geom_point(aes(color = SubCategory)) +
geom_line(data = andre[id <40], aes(x = id, y = Value)) +
geom_smooth(data = andre[id <40], aes(x = id, y = Value, fill = Category), method = "lm") +
facet_grid(~Category) + ggthemes::theme_wsj() +
geom_text(aes(x = id, label = paste0("Value:",round(Value))), size = 3, hjust = 1)
pa
pa = ggplot(data = andre, aes(x = id, y = Value)) +
geom_point(aes(color = SubCategory)) +
geom_line(data = andre[id <40], aes(x = id, y = Value)) +
geom_smooth(data = andre[id <40], aes(x = id, y = Value, fill = SubCategory), method = "lm") +
facet_grid(~Category) + ggthemes::theme_wsj() +
geom_text(aes(x = id, label = paste0("Value:",round(Value))), size = 3, hjust = 1)
pa
pa = ggplot(data = andre, aes(x = id, y = Value)) +
geom_point(aes(color = SubCategory)) +
geom_line(data = andre[id <40], aes(x = id, y = Value)) +
geom_smooth(data = andre[id <40], aes(x = id, y = Value, fill = SubCategory), method = "lm", formula = "Value~SubCategory") +
facet_grid(~Category) + ggthemes::theme_wsj() +
geom_text(aes(x = id, label = paste0("Value:",round(Value))), size = 3, hjust = 1)
pa
pa = ggplot(data = andre, aes(x = id, y = Value)) +
geom_point(aes(color = SubCategory)) +
geom_line(data = andre[id <40], aes(x = id, y = Value)) +
geom_smooth(data = andre[id <40], aes(x = id, y = Value, fill = SubCategory), method = "glm", formula = "Value~SubCategory") +
facet_grid(~Category) + ggthemes::theme_wsj() +
geom_text(aes(x = id, label = paste0("Value:",round(Value))), size = 3, hjust = 1)
pa
pa = ggplot(data = andre, aes(x = id, y = Value)) +
geom_point(aes(color = SubCategory)) +
geom_line(data = andre[id <40], aes(x = id, y = Value)) +
geom_smooth(data = andre[id <40], aes(x = id, y = Value, fill = SubCategory), method = "glm") +
facet_grid(~Category) + ggthemes::theme_wsj() +
geom_text(aes(x = id, label = paste0("Value:",round(Value))), size = 3, hjust = 1)
pa
pa = ggplot(data = andre, aes(x = id, y = Value)) +
geom_point(aes(color = SubCategory)) +
geom_line(data = andre[id <40], aes(x = id, y = Value)) +
geom_smooth(data = andre[id <40], aes(x = id, y = Value, fill = SubCategory), method = "glm") +
facet_grid(~Category) + ggthemes::theme_wsj() +
geom_text(aes(x = id, label = paste0("Value:",round(Value))), size = 3, hjust = 1)
pf = ggplot(data = filipe, aes(x = id, y = Value)) +
geom_point(aes(color = SubCategory)) +
geom_line(data = andre[id <40], aes(x = id, y = Value)) +
geom_smooth(data = andre[id <40], aes(x = id, y = Value), method = "loess") +
facet_grid(~Category) + ggthemes::theme_clean() +
geom_text(aes(x = id, label = paste0("Value:",round(Value))), size = 3, hjust = 1) +
p = grid.arrange(pa, pf, ncol = 1)
pf = ggplot(data = filipe, aes(x = id, y = Value)) +
geom_point(aes(color = SubCategory)) +
geom_line(data = andre[id <40], aes(x = id, y = Value)) +
geom_smooth(data = andre[id <40], aes(x = id, y = Value), method = "loess") +
facet_grid(~Category) + ggthemes::theme_clean() +
geom_text(aes(x = id, label = paste0("Value:",round(Value))), size = 3, hjust = 1) +
p = grid.arrange(pa, pf, ncol = 1)
pa = ggplot(data = andre, aes(x = id, y = Value)) +
geom_point(aes(color = SubCategory)) +
geom_line(data = andre[id <40], aes(x = id, y = Value)) +
geom_smooth(data = andre[id <40], aes(x = id, y = Value, fill = SubCategory), method = "glm", formula = Value~SubCategory) +
facet_grid(~Category) + ggthemes::theme_wsj() +
geom_text(aes(x = id, label = paste0("Value:",round(Value))), size = 3, hjust = 1)
pa
andre
p = ggplot(data = filipe, aes(x = id, y = Value)) +
geom_point(aes(color = SubCategory)) +
geom_line(data = andre[id <40], aes(x = id, y = Value)) +
geom_smooth(data = andre[id <40], aes(x = id, y = Value), method = "loess") +
facet_grid(~Category) + ggthemes::theme_clean() +
geom_text(aes(x = id, label = paste0("Value:",round(Value))), size = 3, hjust = 1)
class(p)
attributes(p)
str(p)
andre
andre1 = andre
andre1[, Value = Value^2]
andre1[, Value =: Value^2]
andre1[, Value := Value^2]
andre1
andre
andre1 = copy(andre)
setwd("D:/Research/droughtBias/src")
# GenerateBoxPlotsPerClGradient = function(...){
library(data.table)
library(ggplot2)
# Load KÃ¶ppen Classification
koppen = fread("../data/mapper_sweden_Koppen.csv")
koppen = koppen[is.na(GRIDCODE), GRIDCODE:= 0]
koppen[GRIDCODE == 42, GRIDCODE := 43]
koppen[, Station := as.character(SUBIDnew)]
print("Loading all simulations")
bias3  <- readRDS("../outputs/bias measurement/NSGamma_training_bias_3.RDS")
bias6  <- readRDS("../outputs/bias measurement/NSGamma_training_bias_6.RDS")
bias9  <- readRDS("../outputs/bias measurement/NSGamma_training_bias_9.RDS")
bias12 <- readRDS("../outputs/bias measurement/NSGamma_training_bias_12.RDS")
bias24 <- readRDS("../outputs/bias measurement/NSGamma_training_bias_24.RDS")
setDT(bias3)
setDT(bias6)
setDT(bias9)
setDT(bias12)
setDT(bias24)
print("Simulations loaded successfully")
maper_Metrics3 = bias3[, rbindlist(rawSpi)][Status %in% c("Train")]
maper_Metrics3 = maper_Metrics3[complete.cases(maper_Metrics3)]
maper_Metrics3 = maper_Metrics3[, .(Version = "SPI(3)",
MAPE_T_TVT = MLmetrics::MAPE(y_true = `SPI-T`, y_pred = `SPI-TVT`),
RMSE_T_TVT = MLmetrics::RMSE(y_true = `SPI-T`, y_pred = `SPI-TVT`),
MAE_T_TVT = MLmetrics::MAE(y_true = `SPI-T`, y_pred = `SPI-TVT`)
), by = .(Station)
]
maper_Metrics6 = bias6[, rbindlist(rawSpi)][Status %in% c("Train")]
maper_Metrics6 = maper_Metrics6[complete.cases(maper_Metrics6)]
maper_Metrics6 = maper_Metrics6[, .(Version = "SPI(6)",
MAPE_T_TVT = MLmetrics::MAPE(y_true = `SPI-T`, y_pred = `SPI-TVT`),
RMSE_T_TVT = MLmetrics::RMSE(y_true = `SPI-T`, y_pred = `SPI-TVT`),
MAE_T_TVT = MLmetrics::MAE(y_true = `SPI-T`, y_pred = `SPI-TVT`)
), by = .(Station)
]
maper_Metrics9 = bias9[, rbindlist(rawSpi)][Status %in% c("Train")]
maper_Metrics9 = maper_Metrics9[complete.cases(maper_Metrics9)]
maper_Metrics9 = maper_Metrics9[, .(Version = "SPI(9)",
MAPE_T_TVT = MLmetrics::MAPE(y_true = `SPI-T`, y_pred = `SPI-TVT`),
RMSE_T_TVT = MLmetrics::RMSE(y_true = `SPI-T`, y_pred = `SPI-TVT`),
MAE_T_TVT = MLmetrics::MAE(y_true = `SPI-T`, y_pred = `SPI-TVT`)
), by = .(Station)
]
maper_Metrics12 = bias12[, rbindlist(rawSpi)][Status %in% c("Train")]
maper_Metrics12 = maper_Metrics12[complete.cases(maper_Metrics12)]
maper_Metrics12 = maper_Metrics12[, .(Version = "SPI(12)",
MAPE_T_TVT = MLmetrics::MAPE(y_true = `SPI-T`, y_pred = `SPI-TVT`),
RMSE_T_TVT = MLmetrics::RMSE(y_true = `SPI-T`, y_pred = `SPI-TVT`),
MAE_T_TVT = MLmetrics::MAE(y_true = `SPI-T`, y_pred = `SPI-TVT`)
), by = .(Station)
]
maper_Metrics24 = bias24[, rbindlist(rawSpi)][Status %in% c("Train")]
maper_Metrics24 = maper_Metrics24[complete.cases(maper_Metrics24)]
maper_Metrics24 = maper_Metrics24[, .(Version = "SPI(24)",
MAPE_T_TVT = MLmetrics::MAPE(y_true = `SPI-T`, y_pred = `SPI-TVT`),
RMSE_T_TVT = MLmetrics::RMSE(y_true = `SPI-T`, y_pred = `SPI-TVT`),
MAE_T_TVT = MLmetrics::MAE(y_true = `SPI-T`, y_pred = `SPI-TVT`)
), by = .(Station)
]
metrics = rbindlist(list(maper_Metrics3,maper_Metrics6,maper_Metrics9,
maper_Metrics12,maper_Metrics24))
basinsMap = st_as_sf(basins, quiet = TRUE)
# Load Basins locations
basins = readOGR("c:/Users/komammas.EUROPE/Downloads/drive-download-20210222T094357Z-001/SHYPE2012_version_1_2_0_polygons_smallglomma_wgs84.dbf")
# Load configuration files
config = configr::read.config(file = "config.cfg")
# GenerateBoxPlotsPerClGradient = function(...){
# Load configuration files
config = configr::read.config(file = "../config.cfg")
# Load multiple libraries
lapply(config$dependencies$libraries, require, character.only = TRUE)
# Load source functions
sourceFunctions = paste0("../src/",list.files("src/"))
for (i in sourceFunctions){
if (i == "../src/runReporting.R"){
next
}
source(i)
}
basinsMap = st_as_sf(basins, quiet = TRUE)
# Load Basins locations
basins = readOGR("c:/Users/komammas.EUROPE/Downloads/drive-download-20210222T094357Z-001/SHYPE2012_version_1_2_0_polygons_smallglomma_wgs84.dbf")
basinsMap = st_as_sf(basins, quiet = TRUE)
basinsMap <- base::merge(basinsMap, metrics, by.x = "SUBIDnew",by.y = "Station")
basinsMap <- base::merge(basinsMap, koppen[,.(Station = Station,
`Köppen-Geiger class` = factor(str_to_title(MAINCLASS),
levels = c("Warm Temperate", "Snow", "Polar")),
Lat= Lat,
Lon = Lon
)
],
by.x = "SUBIDnew",by.y = "Station")
setDT(basinsMap)
basinsMap[, Version := factor(Version, levels = c("SPI(3)","SPI(6)",
"SPI(9)","SPI(12)",
"SPI(24)"))]
basinsMap[`Köppen-Geiger class` == "Warm Temperate", `Köppen-Geiger class` := "Warm \n Temperate"]
print("Computing box plots per climatic gradient and spi scale")
p = ggplot(data = basinsMap[`Köppen-Geiger class` != ""],aes(x = `Köppen-Geiger class`, y = MAE_T_TVT)) +
geom_boxplot() + facet_wrap(~Version, nrow = 1) +
xlab("Köppen-Geiger class") +
ylab("MAD (per basin)") +
theme_bw() +
theme(axis.text.x = element_text(size = 5),
axis.text.y = element_text(size = 8),
axis.title.x = element_text(size = 8),
axis.title.y = element_text(size = 8),
strip.text.x = element_text(size = 8, colour = "black", angle = 0)
)
p
ggsave(filename = "../outputs/nspi_box_plot_mad-koppen.jpeg", plot = p,
units="cm", width=14.5, height=7, dpi = 1000)
ggsave(filename = "../outputs/nspi_box_plot_mad-koppen.jpeg", plot = p,
units="cm", width=12, height=7, dpi = 1000)
setwd("D:/Research/droughtBias/src")
# BiasTrendGrowth = function(spiData, spiScales){
# GenerateBoxPlotsPerClGradient = function(...){
# Load configuration files
config = configr::read.config(file = "../config.cfg")
# Load multiple libraries
lapply(config$dependencies$libraries, require, character.only = TRUE)
# Load KÃ¶ppen Classification
koppen = fread("../data/mapper_sweden_Koppen.csv")
koppen = koppen[is.na(GRIDCODE), GRIDCODE:= 0]
koppen[GRIDCODE == 42, GRIDCODE := 43]
koppen[, Station := as.character(SUBIDnew)]
# Load Basins locations
basins = readOGR("c:/Users/komammas.EUROPE/Downloads/drive-download-20210222T094357Z-001/SHYPE2012_version_1_2_0_polygons_smallglomma_wgs84.dbf")
spiData <- readRDS("../outputs/bias measurement/NSGamma_training_bias_12.RDS")
monthlyRainfall = copy(spiData[, rbindlist(rawSpi)])
growth = monthlyRainfall[, .(MeanTrain = mean(Rainfall[Status == "Train"]),
MeanValidTest = mean(Rainfall[Status != "Train"])
), by = Station]
growth[, Growth := round(100*(MeanValidTest - MeanTrain)/MeanTrain,2)]
transitions = copy(spiData[, rbindlist(transitions_T_TVT), by = .(updatedBasins)])[`SPI-T-Class` != `SPI-TVT-Class`]
transitions = transitions[, .(MissClassifications = sum(Percentage)), by = .(Station = updatedBasins)]
total = base::merge(growth, transitions, by = "Station")
p = ggplot(data = total, aes(x = Growth, y = MissClassifications)) + geom_point(aes(color = `Köppen-Geiger`), size = 0.3, stroke = 0.1) +
xlab("% growth in monthly precipitation (training vs. validation, test sets)") + ylab("% miss-classifications") +
geom_smooth(method="loess", se=TRUE, fullrange=FALSE, level=0.95, size = 0.5) +
geom_vline(xintercept = 0, color = "red", linetype = "dashed", size = 0.5) +
facet_wrap(~`Köppen-Geiger`) +
stat_cor(method = "pearson", label.x = 3, label.y = 40, size = 2)+
theme_bw() +
theme(
legend.key.width = unit(0.2, "cm"),
legend.key.height = unit(0.3, "cm"),
legend.position = "bottom",
legend.text=element_text(size=5),
legend.title= element_text(size=5),
plot.title = element_text(size=8, hjust=0.5),
strip.text = element_text(size=8),
axis.text.x = element_text(size = 8),
axis.text.y = element_text(size = 8),
axis.title.x = element_text(size = 8),
axis.title.y = element_text(size = 8)
) +
scale_shape(
guide = guide_legend(
title.position = "top",
title.hjust = 0.5
)
)+
scale_color_manual(
values = c("#91091e","#111d5e","#23689b"),
name = "Köppen-Geiger class",
guide = guide_legend(
direction = "horizontal",
title.position = "top",
title.hjust = 0.5,
override.aes = list(size = 3)
)
)
total = base::merge(total, koppen[MAINCLASS != "",.(Station = Station,
`Köppen-Geiger` = factor(str_to_title(MAINCLASS),
levels = c("Warm Temperate", "Snow", "Polar")),
Lat= Lat,
Lon = Lon
)
],
by = "Station")
p
total
total
ggplot(data = total, aes(x = Growth, y = MissClassifications)) + geom_point(aes(color = `Köppen-Geiger`), size = 0.3, stroke = 0.1) +
xlab("% growth in monthly precipitation (training vs. validation, test sets)") + ylab("% miss-classifications") +
geom_smooth(method="loess", se=TRUE, fullrange=FALSE, level=0.95, size = 0.5) +
geom_vline(xintercept = 0, color = "red", linetype = "dashed", size = 0.5)
names(totsal)
names(total)
p = ggplot(data = total, aes(x = Growth, y = MissClassifications)) + geom_point(aes(color = `Köppen-Geiger`), size = 0.3, stroke = 0.1) +
xlab("% growth in monthly precipitation (training vs. validation, test sets)") + ylab("% miss-classifications") +
geom_smooth(method="loess", se=TRUE, fullrange=FALSE, level=0.95, size = 0.5) +
geom_vline(xintercept = 0, color = "red", linetype = "dashed", size = 0.5) +
facet_wrap(~`Köppen-Geiger`) +
stat_cor(method = "pearson", label.x = 3, label.y = 40, size = 2)+
theme_bw() +
theme(
legend.key.width = unit(0.2, "cm"),
legend.key.height = unit(0.3, "cm"),
legend.position = "bottom",
legend.text=element_text(size=5),
legend.title= element_text(size=5),
plot.title = element_text(size=8, hjust=0.5),
strip.text = element_text(size=8),
axis.text.x = element_text(size = 8),
axis.text.y = element_text(size = 8),
axis.title.x = element_text(size = 8),
axis.title.y = element_text(size = 8)
)
p = ggplot(data = total, aes(x = Growth, y = MissClassifications)) + geom_point(aes(color = `Köppen-Geiger`), size = 0.3, stroke = 0.1) +
xlab("% growth in monthly precipitation (training vs. validation, test sets)") + ylab("% miss-classifications") +
geom_smooth(method="loess", se=TRUE, fullrange=FALSE, level=0.95, size = 0.5) +
geom_vline(xintercept = 0, color = "red", linetype = "dashed", size = 0.5) +
facet_wrap(~`Köppen-Geiger`) +
stat_cor(method = "pearson", label.x = 3, label.y = 40, size = 2)+
theme_bw() +
theme(
legend.key.width = unit(0.2, "cm"),
legend.key.height = unit(0.3, "cm"),
legend.position = "bottom",
legend.text=element_text(size=5),
legend.title= element_text(size=5),
plot.title = element_text(size=8, hjust=0.5),
strip.text = element_text(size=8),
axis.text.x = element_text(size = 8),
axis.text.y = element_text(size = 8),
axis.title.x = element_text(size = 8),
axis.title.y = element_text(size = 8)
) +
scale_shape(
guide = guide_legend(
title.position = "top",
title.hjust = 0.5
)
)+
scale_color_manual(
values = c("#91091e","#111d5e","#23689b"),
name = "Köppen-Geiger class",
guide = guide_legend(
direction = "horizontal",
title.position = "top",
title.hjust = 0.5,
override.aes = list(size = 3)
)
)
ggsave(p, filename = paste0("../outputs/biasTrendGrowth_scale",spiScales,".jpg"), width = 14.5, height = 8, dpi = 2000,
units = "cm")
spiScales = 12
ggsave(p, filename = paste0("../outputs/biasTrendGrowth_scale",spiScales,".jpg"), width = 14.5, height = 8, dpi = 2000,
units = "cm")
setwd("D:/Research/droughtBias/Miscelaneous")
library(data.table)
library(ggplot2)
spiScales = 3
gammaTr = readRDS(paste0("../outputs/bias measurement/Gamma_training_bias_",spiScales,".RDS"))
normalTr = readRDS(paste0("../outputs/bias measurement/Normal_training_bias_",spiScales,".RDS"))
lognormalTr = readRDS(paste0("../outputs/bias measurement/LogNormal_training_bias_",spiScales,".RDS"))
nsgammaTr = readRDS(paste0("../outputs/bias measurement/NSGamma_training_bias_",spiScales,".RDS"))
transitions_gamma = copy(gammaTr[, rbindlist(transitions_T_TVT), by = .(updatedBasins)])
transitions_gamma = transitions_gamma[updatedBasins %in% koppen[MAINCLASS != "", Station]]
transitions_gamma = transitions_gamma[, .(Transitions = sum(N)), by = .(`SPI-T-Class`,`SPI-TVT-Class`)]
transitions_gamma[, Percentage := round(100*Transitions/sum(Transitions),2)]
transitions_gamma = transitions_gamma[`SPI-T-Class`!=`SPI-TVT-Class`]
transitions_gamma[, `SPI-T-Class` := factor(`SPI-T-Class`, levels = c("Extremely Wet","Very Wet","Moderately Wet","Near Normal",
"Moderately Dry", "Very Dry", "Extremely Dry"
))]
transitions_gamma[, `SPI-TVT-Class` := factor(`SPI-TVT-Class`, levels = c("Extremely Wet","Very Wet","Moderately Wet","Near Normal",
"Moderately Dry", "Very Dry", "Extremely Dry"
))]
transitions_gamma[, Scale:= spiScales]
transitions_gamma[, Distribution := "Gamma"]
# --------------------------------------------------------------------------------------
transitions_normal = copy(normalTr[, rbindlist(transitions_T_TVT), by = .(updatedBasins)])
transitions_normal = transitions_normal[updatedBasins %in% koppen[MAINCLASS != "", Station]]
transitions_normal = transitions_normal[, .(Transitions = sum(N)), by = .(`SPI-T-Class`,`SPI-TVT-Class`)]
transitions_normal[, Percentage := round(100*Transitions/sum(Transitions),2)]
transitions_normal = transitions_normal[`SPI-T-Class`!=`SPI-TVT-Class`]
transitions_normal[, `SPI-T-Class` := factor(`SPI-T-Class`, levels = c("Extremely Wet","Very Wet","Moderately Wet","Near Normal",
"Moderately Dry", "Very Dry", "Extremely Dry"
))]
transitions_normal[, `SPI-TVT-Class` := factor(`SPI-TVT-Class`, levels = c("Extremely Wet","Very Wet","Moderately Wet","Near Normal",
"Moderately Dry", "Very Dry", "Extremely Dry"
))]
transitions_normal[, Scale:= spiScales]
transitions_normal[, Distribution := "Normal"]
# --------------------------------------------------------------------------------------
transitions_lognormal = copy(lognormalTr[, rbindlist(transitions_T_TVT), by = .(updatedBasins)])
transitions_lognormal = transitions_lognormal[updatedBasins %in% koppen[MAINCLASS != "", Station]]
transitions_lognormal = transitions_lognormal[, .(Transitions = sum(N)), by = .(`SPI-T-Class`,`SPI-TVT-Class`)]
transitions_lognormal[, Percentage := round(100*Transitions/sum(Transitions),2)]
transitions_lognormal = transitions_lognormal[`SPI-T-Class`!=`SPI-TVT-Class`]
transitions_lognormal[, `SPI-T-Class` := factor(`SPI-T-Class`, levels = c("Extremely Wet","Very Wet","Moderately Wet","Near Normal",
"Moderately Dry", "Very Dry", "Extremely Dry"
))]
transitions_lognormal[, `SPI-TVT-Class` := factor(`SPI-TVT-Class`, levels = c("Extremely Wet","Very Wet","Moderately Wet","Near Normal",
"Moderately Dry", "Very Dry", "Extremely Dry"
))]
transitions_lognormal[, Scale:= spiScales]
transitions_lognormal[, Distribution := "LogNormal"]
# --------------------------------------------------------------------------------------
transitions_nsgamma = copy(nsgammaTr[, rbindlist(transitions_T_TVT), by = .(updatedBasins)])
transitions_nsgamma = transitions_nsgamma[updatedBasins %in% koppen[MAINCLASS != "", Station]]
transitions_nsgamma = transitions_nsgamma[, .(Transitions = sum(N)), by = .(`SPI-T-Class`,`SPI-TVT-Class`)]
transitions_nsgamma[, Percentage := round(100*Transitions/sum(Transitions),2)]
transitions_nsgamma = transitions_nsgamma[`SPI-T-Class`!=`SPI-TVT-Class`]
transitions_nsgamma[, `SPI-T-Class` := factor(`SPI-T-Class`, levels = c("Extremely Wet","Very Wet","Moderately Wet","Near Normal",
"Moderately Dry", "Very Dry", "Extremely Dry"
))]
transitions_nsgamma[, `SPI-TVT-Class` := factor(`SPI-TVT-Class`, levels = c("Extremely Wet","Very Wet","Moderately Wet","Near Normal",
"Moderately Dry", "Very Dry", "Extremely Dry"
))]
transitions_nsgamma[, Scale:= spiScales]
transitions_nsgamma[, Distribution := "NSGamma"]
# --------------------------------------------------------------------------------------
allTransitions = rbindlist(list(transitions_gamma, transitions_normal, transitions_lognormal, transitions_nsgamma))
setnames(allTransitions, "Percentage", "Transitions (%)")
gammaTr[, rbindlist(transitions_T_TVT), by = .(updatedBasins)]
gammaTr[, rbindlist(transitions_T_TVT), by = .(updatedBasins)][,uniqueN(updatedBasins)]
transitions_nsgamma
allTransitions
allTransitions
fwrite(allTransitions, paste0("../outputs/Transition_plot_spi",spiScales,".csv"), row.names = F)
library(data.table)
library(ggplot2)
spiScales = 24
gammaTr = readRDS(paste0("../outputs/bias measurement/Gamma_training_bias_",spiScales,".RDS"))
normalTr = readRDS(paste0("../outputs/bias measurement/Normal_training_bias_",spiScales,".RDS"))
lognormalTr = readRDS(paste0("../outputs/bias measurement/LogNormal_training_bias_",spiScales,".RDS"))
nsgammaTr = readRDS(paste0("../outputs/bias measurement/NSGamma_training_bias_",spiScales,".RDS"))
transitions_gamma = copy(gammaTr[, rbindlist(transitions_T_TVT), by = .(updatedBasins)])
transitions_gamma = transitions_gamma[updatedBasins %in% koppen[MAINCLASS != "", Station]]
transitions_gamma = transitions_gamma[, .(Transitions = sum(N)), by = .(`SPI-T-Class`,`SPI-TVT-Class`)]
transitions_gamma[, Percentage := round(100*Transitions/sum(Transitions),2)]
transitions_gamma = transitions_gamma[`SPI-T-Class`!=`SPI-TVT-Class`]
transitions_gamma[, `SPI-T-Class` := factor(`SPI-T-Class`, levels = c("Extremely Wet","Very Wet","Moderately Wet","Near Normal",
"Moderately Dry", "Very Dry", "Extremely Dry"
))]
transitions_gamma[, `SPI-TVT-Class` := factor(`SPI-TVT-Class`, levels = c("Extremely Wet","Very Wet","Moderately Wet","Near Normal",
"Moderately Dry", "Very Dry", "Extremely Dry"
))]
transitions_gamma[, Scale:= spiScales]
transitions_gamma[, Distribution := "Gamma"]
# --------------------------------------------------------------------------------------
transitions_normal = copy(normalTr[, rbindlist(transitions_T_TVT), by = .(updatedBasins)])
transitions_normal = transitions_normal[updatedBasins %in% koppen[MAINCLASS != "", Station]]
transitions_normal = transitions_normal[, .(Transitions = sum(N)), by = .(`SPI-T-Class`,`SPI-TVT-Class`)]
transitions_normal[, Percentage := round(100*Transitions/sum(Transitions),2)]
transitions_normal = transitions_normal[`SPI-T-Class`!=`SPI-TVT-Class`]
transitions_normal[, `SPI-T-Class` := factor(`SPI-T-Class`, levels = c("Extremely Wet","Very Wet","Moderately Wet","Near Normal",
"Moderately Dry", "Very Dry", "Extremely Dry"
))]
transitions_normal[, `SPI-TVT-Class` := factor(`SPI-TVT-Class`, levels = c("Extremely Wet","Very Wet","Moderately Wet","Near Normal",
"Moderately Dry", "Very Dry", "Extremely Dry"
))]
transitions_normal[, Scale:= spiScales]
transitions_normal[, Distribution := "Normal"]
# --------------------------------------------------------------------------------------
transitions_lognormal = copy(lognormalTr[, rbindlist(transitions_T_TVT), by = .(updatedBasins)])
transitions_lognormal = transitions_lognormal[updatedBasins %in% koppen[MAINCLASS != "", Station]]
transitions_lognormal = transitions_lognormal[, .(Transitions = sum(N)), by = .(`SPI-T-Class`,`SPI-TVT-Class`)]
transitions_lognormal[, Percentage := round(100*Transitions/sum(Transitions),2)]
transitions_lognormal = transitions_lognormal[`SPI-T-Class`!=`SPI-TVT-Class`]
transitions_lognormal[, `SPI-T-Class` := factor(`SPI-T-Class`, levels = c("Extremely Wet","Very Wet","Moderately Wet","Near Normal",
"Moderately Dry", "Very Dry", "Extremely Dry"
))]
transitions_lognormal[, `SPI-TVT-Class` := factor(`SPI-TVT-Class`, levels = c("Extremely Wet","Very Wet","Moderately Wet","Near Normal",
"Moderately Dry", "Very Dry", "Extremely Dry"
))]
transitions_lognormal[, Scale:= spiScales]
transitions_lognormal[, Distribution := "LogNormal"]
# --------------------------------------------------------------------------------------
transitions_nsgamma = copy(nsgammaTr[, rbindlist(transitions_T_TVT), by = .(updatedBasins)])
transitions_nsgamma = transitions_nsgamma[updatedBasins %in% koppen[MAINCLASS != "", Station]]
transitions_nsgamma = transitions_nsgamma[, .(Transitions = sum(N)), by = .(`SPI-T-Class`,`SPI-TVT-Class`)]
transitions_nsgamma[, Percentage := round(100*Transitions/sum(Transitions),2)]
transitions_nsgamma = transitions_nsgamma[`SPI-T-Class`!=`SPI-TVT-Class`]
transitions_nsgamma[, `SPI-T-Class` := factor(`SPI-T-Class`, levels = c("Extremely Wet","Very Wet","Moderately Wet","Near Normal",
"Moderately Dry", "Very Dry", "Extremely Dry"
))]
transitions_nsgamma[, `SPI-TVT-Class` := factor(`SPI-TVT-Class`, levels = c("Extremely Wet","Very Wet","Moderately Wet","Near Normal",
"Moderately Dry", "Very Dry", "Extremely Dry"
))]
transitions_nsgamma[, Scale:= spiScales]
transitions_nsgamma[, Distribution := "NSGamma"]
# --------------------------------------------------------------------------------------
allTransitions = rbindlist(list(transitions_gamma, transitions_normal, transitions_lognormal, transitions_nsgamma))
setnames(allTransitions, "Percentage", "Transitions (%)")
fwrite(allTransitions, paste0("../outputs/Transition_plot_spi",spiScales,".csv"), row.names = F)
